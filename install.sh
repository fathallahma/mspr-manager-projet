#!/bin/bash

# Script d'installation automatique pour le projet MSPR COFRAP
# Auteur: Projet MSPR - EPSI
# Date: $(date)

set -e

echo "ðŸš€ Installation du projet MSPR COFRAP"
echo "======================================"

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages colorÃ©s
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# VÃ©rification des prÃ©requis
print_status "VÃ©rification des prÃ©requis..."

# VÃ©rifier PostgreSQL
if ! command -v psql &> /dev/null; then
    print_error "PostgreSQL n'est pas installÃ©. Veuillez l'installer d'abord."
    exit 1
fi

# VÃ©rifier Python
if ! command -v python3 &> /dev/null; then
    print_error "Python 3 n'est pas installÃ©. Veuillez l'installer d'abord."
    exit 1
fi

print_success "PrÃ©requis validÃ©s"

# Configuration de la base de donnÃ©es
print_status "Configuration de la base de donnÃ©es PostgreSQL..."

# VÃ©rifier si PostgreSQL est en cours d'exÃ©cution
if ! sudo systemctl is-active --quiet postgresql; then
    print_warning "PostgreSQL n'est pas dÃ©marrÃ©. Tentative de dÃ©marrage..."
    sudo systemctl start postgresql
fi

# CrÃ©er la base de donnÃ©es
print_status "CrÃ©ation de la base de donnÃ©es mspr_db..."
sudo -u postgres psql -c "CREATE DATABASE mspr_db;" 2>/dev/null || print_warning "Base de donnÃ©es mspr_db existe dÃ©jÃ "

# CrÃ©er l'utilisateur
print_status "CrÃ©ation de l'utilisateur mspr_user..."
sudo -u postgres psql -c "CREATE USER mspr_user WITH PASSWORD 'mspr_password';" 2>/dev/null || print_warning "Utilisateur mspr_user existe dÃ©jÃ "

# Donner les permissions
print_status "Attribution des permissions..."
sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE mspr_db TO mspr_user;"

# CrÃ©er les tables
print_status "CrÃ©ation des tables..."
sudo -u postgres psql -d mspr_db -f database/init.sql

# Donner les permissions sur les tables
print_status "Attribution des permissions sur les tables..."
sudo -u postgres psql -d mspr_db -c "GRANT ALL PRIVILEGES ON TABLE users TO mspr_user; GRANT ALL PRIVILEGES ON SEQUENCE users_id_seq TO mspr_user;"

print_success "Base de donnÃ©es configurÃ©e avec succÃ¨s"

# Configuration de l'environnement Python
print_status "Configuration de l'environnement Python..."

# CrÃ©er l'environnement virtuel
if [ ! -d "venv" ]; then
    python3 -m venv venv
    print_success "Environnement virtuel crÃ©Ã©"
else
    print_warning "Environnement virtuel existe dÃ©jÃ "
fi

# Activer et installer les dÃ©pendances
source venv/bin/activate
pip install --quiet psycopg2-binary pyotp qrcode Pillow

print_success "DÃ©pendances Python installÃ©es"

# Test des fonctions
print_status "Test des fonctions serverless..."
python3 simple_test.py

print_success "Tests rÃ©ussis !"

# Affichage des informations finales
echo ""
echo "ðŸŽ‰ Installation terminÃ©e avec succÃ¨s !"
echo "======================================"
echo ""
echo "ðŸ“Š Informations de connexion:"
echo "  â€¢ Base de donnÃ©es: mspr_db"
echo "  â€¢ Utilisateur: mspr_user"
echo "  â€¢ Mot de passe: mspr_password"
echo "  â€¢ Host: localhost"
echo "  â€¢ Port: 5432"
echo ""
echo "ðŸ”§ Commandes utiles:"
echo "  â€¢ Activer l'environnement: source venv/bin/activate"
echo "  â€¢ Tester les fonctions: python3 simple_test.py"
echo "  â€¢ Consulter la DB: PGPASSWORD=mspr_password psql -h localhost -d mspr_db -U mspr_user"
echo ""
echo "ðŸ“š Documentation:"
echo "  â€¢ README.md - Guide d'utilisation complet"
echo "  â€¢ FUNCTIONS_README.md - Documentation des fonctions"
echo ""
echo "ðŸš€ DÃ©ploiement OpenFaaS:"
echo "  â€¢ Construction: faas-cli build -f stack.yaml"
echo "  â€¢ DÃ©ploiement: faas-cli deploy -f stack.yaml"
echo ""
echo "âœ… Le projet MSPR COFRAP est prÃªt Ã  Ãªtre utilisÃ© !" 